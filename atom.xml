<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Think Different</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kimisme.com/"/>
  <updated>2017-07-23T14:05:47.756Z</updated>
  <id>http://kimisme.com/</id>
  
  <author>
    <name>Kimisme</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>寡妇的油</title>
    <link href="http://kimisme.com/2017/07/23/grace-the-oil-of-the-widow/"/>
    <id>http://kimisme.com/2017/07/23/grace-the-oil-of-the-widow/</id>
    <published>2017-07-23T10:25:16.000Z</published>
    <updated>2017-07-23T14:05:47.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是今天教会分享的一段经文。本文包含三部分内容：1.经文故事介绍；2.我们从经文看到了什么信息；3.经文要传达的信息</p><a id="more"></a><h2 id="经文摘录"><a href="#经文摘录" class="headerlink" title="经文摘录"></a>经文摘录</h2><p><strong>以利沙帮助一个穷寡妇(<code>王下4:1-7</code>)</strong></p><blockquote><p>有一个先知门徒的妻，哀求以利沙说：“你仆人我丈夫死了，他敬畏耶和华是你所知道的。现在有债主来，要取我两个儿子作奴仆。”以利沙问她说：“我可以为你做甚么呢？你告诉我，你家里有甚么？”她说：“婢女家中除了一瓶油之外，没有甚么。”以利沙说：“你去，向你众邻舍借空器皿，不要少借。回到家里，关上门，你和你儿子在里面，将油倒在所有的器皿里，倒满了的放在一边。”于是，妇人离开以利沙去了，关上门，自己和儿子在里面。儿子把器皿拿来，她就倒油，器皿都满了。她对儿子说：“再给我拿器皿来。”儿子说：“再没有器皿了。”油就止住了。妇人去告诉神人。神人说：“你去卖油还债，所剩的，你和你儿子可以靠著度日。”</p></blockquote><h2 id="经文关键词"><a href="#经文关键词" class="headerlink" title="经文关键词"></a>经文关键词</h2><p><code>债主</code>，<code>寡妇</code>，<code>以利沙</code>，<code>寡妇的儿子</code>，<code>空器皿</code>，<code>油</code></p><h2 id="经文讲了什么故事"><a href="#经文讲了什么故事" class="headerlink" title="经文讲了什么故事"></a>经文讲了什么故事</h2><p>债主逼迫穷寡妇儿子做奴仆，以利沙显神迹帮助。</p><h2 id="我们看到的信息"><a href="#我们看到的信息" class="headerlink" title="我们看到的信息"></a>我们看到的信息</h2><p>债主在人身处困境时，并没有怜悯，而是咄咄逼人。</p><p>寡妇相信他丈夫的神会帮助她。</p><p>以利沙在人向他寻求帮助时，并没有拒绝，而是表现出慈爱。</p><p>寡妇对以利沙的话并没有怀疑。</p><p>以利沙显神迹使一瓶油倒满了每个的空器皿并有余。</p><p>寡妇不仅走出了困境，还靠着多余的油度日。</p><h2 id="经文传达的信息"><a href="#经文传达的信息" class="headerlink" title="经文传达的信息"></a>经文传达的信息</h2><p><strong>神所给予我们的远比我们渴求的多的多</strong></p><p>妇人只想他的儿子不被债主抓走，但神不仅使寡妇还了债，还靠着买油度日。</p><p><strong>在软弱中寻求神</strong></p><p>妇人在患难中寻求神的帮助。</p><p>做为神的代言人以利沙依然寻求神的帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文是今天教会分享的一段经文。本文包含三部分内容：1.经文故事介绍；2.我们从经文看到了什么信息；3.经文要传达的信息&lt;/p&gt;
    
    </summary>
    
      <category term="Grace" scheme="http://kimisme.com/categories/Grace/"/>
    
    
  </entry>
  
  <entry>
    <title>成为自我的教练</title>
    <link href="http://kimisme.com/2017/07/22/dedao-be-your-own-coach/"/>
    <id>http://kimisme.com/2017/07/22/dedao-be-your-own-coach/</id>
    <published>2017-07-22T09:15:44.000Z</published>
    <updated>2017-07-22T09:55:01.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是古典老师分享的一篇文章的部分学习记录。原文名为《自我教练：打赢你的“内在”之战》<br><a id="more"></a></p><h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><blockquote><p><strong>传统的教学方法里人们过多希望做一个标准的动作，却常常忽略了最重要的“目标”。</strong></p></blockquote><p>比如演讲的时候，我们常常满脑子在想该做的10件事，不该做的事，和背好的稿子，就是忘记了其实演讲要吸引的是台下的人注意。</p><p>比如写文章时，我们经常花大量时间在文章样式怎么吸引人，怎么分段落，寻找好看的图片，确忘记了写文章就是将一个观点表达清楚。</p><blockquote><p><strong>每一项比赛都是由两个部分构成，外在比赛和内在比赛。</strong></p></blockquote><p>所谓的外在比赛，就是要战胜对手，克服障碍，达成必要的外在目标。</p><p>“内在”里，选手也在进行比赛。注意力不集中、过度紧张、缺乏自信、无端自责…</p><p>所有的高手都是“内在”比赛的人。</p><blockquote><p><strong>聚集目标、排除内在干扰</strong></p></blockquote><ul><li>表现=潜能-干扰</li><li>performance=potential-inerfere</li><li>P=p-p**</li></ul><p>我们要做的事情，就是降低干扰。“放松而专注”，干扰主要来自于两个，自我评价(就是内在弹幕)以及目标不清。</p><blockquote><p><strong>反例</strong></p></blockquote><p>和朋友打桌球的时候，每当他出杆的时候，我就说，教教我吧。你出杆的时候，到底是怎么发力的？是先用腰部带动手，还是手和腰一起用力？是呼气还是吸气？是先瞄准再调，还是调完再瞄准？</p><p>经过我的干扰，他都没赢过。第一，他目标开始模糊，要赢又要教。第二，他的内心开始自我评价—其实谁知道是先呼气还是吸气呢？</p><blockquote><p><strong>今日思考题</strong></p></blockquote><p>今天你最想拿到的一个结果是什么？如果今晚睡觉前你觉得一整天都没有白过，那是因为白天做了什么？</p><p><strong>当好自己的教练，它会让你持续聚焦目标，排除干扰，方式而专注地发货潜能。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这是古典老师分享的一篇文章的部分学习记录。原文名为《自我教练：打赢你的“内在”之战》&lt;br&gt;
    
    </summary>
    
      <category term="得到" scheme="http://kimisme.com/categories/%E5%BE%97%E5%88%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>cheat-sheet-visual-studio-shortcut-key</title>
    <link href="http://kimisme.com/2017/06/28/cheat-sheet-visual-studio-shortcut-key/"/>
    <id>http://kimisme.com/2017/06/28/cheat-sheet-visual-studio-shortcut-key/</id>
    <published>2017-06-28T00:47:27.000Z</published>
    <updated>2017-07-22T09:06:28.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><strong>代码格式化</strong></p><p>第一步：选中代码<br>第二步：<code>Ctrl+K</code>，<code>Ctrl+F</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《图解HTTP》读书笔记</title>
    <link href="http://kimisme.com/2017/06/13/book-read-record-graphic-http/"/>
    <id>http://kimisme.com/2017/06/13/book-read-record-graphic-http/</id>
    <published>2017-06-13T13:57:50.000Z</published>
    <updated>2017-06-13T13:59:57.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>文本是《图解HTTP》的读书笔记，持续更新中。边读边记。</p><a id="more"></a><h2 id="第1章-了解Web及网络基础"><a href="#第1章-了解Web及网络基础" class="headerlink" title="第1章 了解Web及网络基础"></a>第1章 了解Web及网络基础</h2><p><strong>协议(protocol)</strong></p><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由那一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的一切都需要一种规则。我们就把这种规则称为协议。</p><p><strong>TCP三次握手(three-way handshaking)</strong></p><ol><li>发送端首先发送一个带<code>SYN</code>标志的数据包给对方。</li><li>接收端收到后，回传一个带有<code>SYN/ACK</code>标志的数据包以示传达确认信息</li><li>发送端再回传一个带<code>ACK</code>标志的数据包，代表“握手”结束</li></ol><p><strong>一次请求过程</strong></p><ol><li>发送端访问<code>http://hackr.jp/xss/Web</code>页面</li><li>请求先到达<code>DNS服务</code>，将域名解析成对应的IP地址<code>20x.189.105.112</code></li><li>客户端再根据<code>应用层的HTTP协议</code>，生成针对目标Web服务器的HTTP请求报文</li><li>为了方便通信，<code>传输层的TCP协议</code>会将请求报文分割成报文段</li><li>紧接着<code>网络层的IP协议</code>会搜索对方的地址，一边中转一边传送</li><li>最后报文到达与处理连接网络的硬件部分<code>链路层</code></li><li>在接收端依次经过<code>链路层</code>，<code>网络层</code>,<code>传输层</code>,<code>应用层</code></li><li>接受端将请求的处理结果也同样利用<code>TCP/IP</code>通信协议向用户进行回转</li></ol><h2 id="第2章-简单的HTTP协议"><a href="#第2章-简单的HTTP协议" class="headerlink" title="第2章 简单的HTTP协议"></a>第2章 简单的HTTP协议</h2><p><strong>请求报文与响应报文</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GET /index.htm HTTP/1.1</div><div class="line">Host: hackr.jp</div></pre></td></tr></table></figure><p>请求报文由请求方法、请求URI，客户端的协议版本，可选的请求首字段和内容实体构成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Length: 362</div></pre></td></tr></table></figure><p>响应报文由接收端的协议版本、状态码，用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p><p><strong>HTTP的一些特性</strong></p><ol><li>HTTP是一种无状态协议，即不保存之前一切或响应报文的信息。为了实现保持状态的功能，引入了<code>Cookie技术</code></li><li>HTTP/1.0每进行一次通信，紧要进行一次TCP连接和断开，为了解决TCP连接问题，在HTTP/1.1中引入了<code>持久连接</code>。它的特点是任意一端没有明确提出断开连接，则保持TCP连接状态</li><li>以前请求后需等待并受到响应，才能发送下一个请求。持久连接使多数请求以<code>管道化</code>方式发送成为可能。即能够做到同事并行发送多个请求，而不需要一个接一个地等待响应</li></ol><p><strong>使用Cookie的状态管理</strong></p><p>客户端发送请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GET /reader/ HTTP/1.1</div><div class="line">Host:hackr.jp</div></pre></td></tr></table></figure><p>接收端响应报文</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Server: Apache</div><div class="line">Set-Cookie: sid=1342077140226724</div></pre></td></tr></table></figure><p>客户端再次发送请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /image/ HTTP/1.1</div><div class="line">Host:hackr.jp</div><div class="line">Cookie: sid=1342077140226724</div></pre></td></tr></table></figure><h2 id="第3章-报文内的HTTP信息"><a href="#第3章-报文内的HTTP信息" class="headerlink" title="第3章 报文内的HTTP信息"></a>第3章 报文内的HTTP信息</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;文本是《图解HTTP》的读书笔记，持续更新中。边读边记。&lt;/p&gt;
    
    </summary>
    
      <category term="BookRecord" scheme="http://kimisme.com/categories/BookRecord/"/>
    
    
  </entry>
  
  <entry>
    <title>record-oop</title>
    <link href="http://kimisme.com/2017/06/12/record-oop/"/>
    <id>http://kimisme.com/2017/06/12/record-oop/</id>
    <published>2017-06-12T14:19:57.000Z</published>
    <updated>2017-06-12T14:27:30.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录面向对象开发的一些话。</p><a id="more"></a><p>把类的职责划分好。<br>把领域的问题划分到合适的类当中去，让这些类协作起来。<br>让代码尽可能对接口进行编程。<br>多用组合，而不是继承。<br>发现变化并且封装变化。</p><p>在概念层次上，对象是一组责任，这个对象负责什么。<br>在规约层次上，对象是一组可以被其他对象或者自己调用的方法。<br>在实现层次上，对象是代码和数据</p><p>面向对象设计原则<br>单一职责原则 （SRP）<br>开闭原则 (OCP)<br>Liskov 替换原则 (LSP)<br>接口隔离原则 (ISP)<br>依赖倒置原则 (DIP)</p><p>SOLID：写出优雅代码的关键所在</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;记录面向对象开发的一些话。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我从哪里来，要往哪里去</title>
    <link href="http://kimisme.com/2017/06/11/grace-where-did-i-come-from/"/>
    <id>http://kimisme.com/2017/06/11/grace-where-did-i-come-from/</id>
    <published>2017-06-11T13:13:19.000Z</published>
    <updated>2017-06-11T13:44:14.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天磐石堂牧师分享的主题是，<strong>我从哪里来，要往哪里去</strong>，然后就有了这篇随记。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>我从哪里来，是温州吗，还是杭电<br>它们都不是我的起点<br>我已经在杭州生活了6年<br>早已忘记，忘记了最初的来路线<br>回头，早已看不清，最初的那个自己<br>我有一个梦想<br>成为一名见证人，影响周围的人<br>但如今，我已习惯了妥协<br>生活的安逸，失去了目标<br>单调的工作，缺少了本该有的激情<br>我已习惯用左手工作<br>我有一个梦想<br>在象棋领域有所成就<br>从村子，到学校，到县城，一路的赢棋<br>我曾以为这是上天赐给我的天赋<br>手游毁了这一切<br>几次的输气，开始怀疑<br>我有一个梦想<br>成为一名作家<br>读书时，每当作文被当成范文<br>总有莫名的成就感<br>有段时间，每天数着新浪中的博文的阅读数<br>如今字都写不来了<br>现在我有一个梦想<br>成为某个领域的权威</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天磐石堂牧师分享的主题是，&lt;strong&gt;我从哪里来，要往哪里去&lt;/strong&gt;，然后就有了这篇随记。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java系列-Synchronized与Volatile的原理</title>
    <link href="http://kimisme.com/2017/06/10/java-basic-synchronized-volatile/"/>
    <id>http://kimisme.com/2017/06/10/java-basic-synchronized-volatile/</id>
    <published>2017-06-10T14:04:30.000Z</published>
    <updated>2017-06-11T14:04:57.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍在多线程开发中，对于并发读取数据的一种处理方式。</p><a id="more"></a><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p><strong>可见性是说操作结果其他线程是否可见</strong></p><p>可见性，是针对线程来说的，即一个线程对共享变量值的修改，能够及时地被其他线程看到。</p><p>如果一个变量在多个线程的工作内存中都存在副本，那么这个变量就是这几个线程的共享变量。</p><p>比如有一个整型变量<code>number=1</code>，线程A做了<code>number+=1</code>的写操作，那么线程B在读取<code>number</code>的时候，就应该是<code>2</code>，而不应该还是<code>1</code>.</p><p><strong>导致共享变量在线程间不可见的原因</strong></p><ol><li>线程的交叉执行（原子性）</li><li>重排序结合线程交叉执行（原子性）</li><li>共享变量更新后的值没有在工作内存与主内存间及时更新（可见性）</li></ol><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p><strong>一个操作是否可分割</strong></p><p>字面上理解，原子是世界上最小的单位，具有不可分割的特性。在代码层面上可以理解为，一个操作不能再被分割成更小的颗粒度。比如：<code>a++</code>，它实际上是两个步骤：首先做加法<code>temp=a+1</code>，然后再赋值<code>a=temp</code>。所以<code>a++</code>不是一个原子操作。如果一个操作是原子操作，那么我们就称它具有原子性。原子性可以理解为</p><h2 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h2><p><strong>什么是重排序</strong></p><p>为了是提升编译器和处理的执行效率，而对程序代码做了先后顺序调整。</p><p><strong>为什么要重排序</strong></p><p>指令重排序是编译器或处理器为了提高程序性能而做的优化。主要包括以下几方面：</p><ol><li>编译器优化的重排序(编译器优化)</li><li>指令集并行重排序(处理器优化)</li><li>内存系统的重排序(处理器优化)</li></ol><p><strong>重排序例子一</strong></p><p>如果代码顺序如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> number=<span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> result=<span class="number">0</span>;</div></pre></td></tr></table></figure><p>重排序后，执行顺序可能是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> number=<span class="number">1</span>;</div></pre></td></tr></table></figure><p><strong>重排序例子二</strong></p><p>以下代码也是可以被重排序的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (ready) &#123;      </div><div class="line">result = number * <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为number的运算与ready是没有数据依赖关系的，他可以被重排序成以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> temp = number*<span class="number">3</span>;</div><div class="line"><span class="keyword">if</span>(ready)&#123;</div><div class="line">result = temp;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>重排序带来的问题</strong></p><p>重排序不会给单线程带来内存可见性问题；<br>多线程中程序交错执行时，重排序可能会造成内存可见性问题。</p><p><strong>as-if-serial语义</strong></p><p>这里就引出了一个概念，代码重排序后，执行的结果的变化。我们称这个约束为<code>as-if-serial</code>，即无论如何重排序，程序执行的结果应该与代码顺序执行的结果一致。</p><blockquote><p>Java编译器、运行时和处理器都会保证Java在单线程下遵循as-if-serial语义</p></blockquote><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>Java内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存和从内存中读取变量这样的细节。</p><ul><li>所有的变量都是存储在主内存中的</li><li>每个线程都有自己独立的工作内存，里面保存该线程使用到的变量的副本</li><li>线程对共享变量的所有操作都必须在自己的工作内存中进行，不能直接从主内存中读写</li><li>不同线程之间无法直接访问其他线程工作内存中的变量，线程间变量值的传递需要通过主内存来完成</li></ul><p><img src="" alt=""></p><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h2><h3 id="代码清单"><a href="#代码清单" class="headerlink" title="代码清单"></a>代码清单</h3><p>完整代码如下，然后我们再一步步分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span> </span>&#123;</div><div class="line"><span class="comment">// 共享变量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> ready = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 写操作</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</div><div class="line">ready = <span class="keyword">true</span>; <span class="comment">// 1.1</span></div><div class="line"><span class="comment">//为了测试，让写操作稍微延迟一点</span></div><div class="line"><span class="comment">//try &#123;</span></div><div class="line"><span class="comment">//Thread.sleep(1000);</span></div><div class="line"><span class="comment">//&#125; catch (InterruptedException e) &#123;</span></div><div class="line"><span class="comment">//e.printStackTrace();</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line">number = <span class="number">2</span>; <span class="comment">// 1.2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 读操作</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (ready) &#123; <span class="comment">// 2.1</span></div><div class="line">result = number * <span class="number">3</span>; <span class="comment">// 2.2</span></div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"result的值为："</span> + result);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 内部线程类</span></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"><span class="comment">// 根据构造方法中传入的flag参数，确定线程执行读操作还是写操作</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReadWriteThread</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.flag = flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (flag) &#123;</div><div class="line"><span class="comment">// 构造方法中传入true，执行写操作</span></div><div class="line">write();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">// 构造方法中传入false，执行读操作</span></div><div class="line">read();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SynchronizedDemo synDemo = <span class="keyword">new</span> SynchronizedDemo();</div><div class="line"><span class="comment">// 启动线程执行写操作</span></div><div class="line">synDemo.new ReadWriteThread(<span class="keyword">true</span>).start();</div><div class="line"><span class="comment">// 启动线程执行读操作</span></div><div class="line">synDemo.new ReadWriteThread(<span class="keyword">false</span>).start();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<code>SynchronizedDemo</code>中有3个共享变量。有两个操作：<code>写操作</code>和<code>读操作</code>。还有一个线程类：它的功能比较简单就是，通过构造函数传入一个<code>boolean</code>来执行不同的方法。如果为<code>true</code>就执行写操作，如果是<code>false</code>就执行读操作。</p><h3 id="几种结果"><a href="#几种结果" class="headerlink" title="几种结果"></a>几种结果</h3><p>因为<code>写</code>和<code>读</code>是再两个线程里面，那么就涉及到先后顺序了。<br>结果一：如果执行顺序是<code>ready=true</code>-&gt;<code>number=2</code>-&gt;<code>if(ready){}</code>-&gt;<code>result=number*3</code>，那么输出result的结果就是<code>6</code><br>结果二：如果执行顺序是<code>ready=true</code>-&gt;<code>if(ready){}</code>-&gt;<code>result=number*3</code>-&gt;<code>number=2</code>，那么输出的result结果就是<code>3</code><br>结果三：如果执行顺序是<code>number=2</code>-&gt;<code>if(ready){}</code>-&gt;<code>result=number*3</code>-&gt;<code>ready=true</code>。因为此时ready=false,那么输出的结果就是<code>0</code></p><h3 id="解决可见性问题"><a href="#解决可见性问题" class="headerlink" title="解决可见性问题"></a>解决可见性问题</h3><p>我们修改写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 写操作                                  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;      </div><div class="line">ready = <span class="keyword">true</span>; <span class="comment">// 1.1                </span></div><div class="line"><span class="comment">//为了测试，让写操作稍微延迟一点                   </span></div><div class="line"><span class="keyword">try</span> &#123;                               </div><div class="line">Thread.sleep(<span class="number">1000</span>);             </div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">e.printStackTrace();            </div><div class="line">&#125;                                   </div><div class="line">number = <span class="number">2</span>; <span class="comment">// 1.2                  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再修改读方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 读操作                                                </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;                     </div><div class="line"><span class="keyword">if</span> (ready) &#123; <span class="comment">// 2.1                               </span></div><div class="line">result = number * <span class="number">3</span>; <span class="comment">// 2.2                   </span></div><div class="line">&#125;                                                 </div><div class="line">System.out.println(<span class="string">"result的值为："</span> + result);        </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们再次运行程序，不管运行多少次，结果都是<code>6</code></p><h3 id="Synchronized的实现过程"><a href="#Synchronized的实现过程" class="headerlink" title="Synchronized的实现过程"></a>Synchronized的实现过程</h3><ol><li>获得互斥锁</li><li>清空工作内存</li><li>从主内存拷贝变量的最新副本到工作内存</li><li>执行代码</li><li>将更改后的共享变量的值刷新到主内存</li><li>释放互斥锁</li></ol><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><h3 id="Volatile如何实现内存可见性"><a href="#Volatile如何实现内存可见性" class="headerlink" title="Volatile如何实现内存可见性"></a>Volatile如何实现内存可见性</h3><ul><li>对volatile变量执行写操作时，会在写操作后加入一条store屏障指令</li><li>对volatile变量执行读操作时，会在读操作前加入一条load屏障指令</li></ul><p>加入这两条执行的结果就是：volatile变量在每次被线程访问时，都被迫从主内存中重读该变量的值，而当该变量发生变化时，又会强迫线程将最新的值刷新到主内存中。这样任何时刻，不同的线程总能看到该变量的最新值。</p><h3 id="代码清单-1"><a href="#代码清单-1" class="headerlink" title="代码清单"></a>代码清单</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</div><div class="line"><span class="comment">//共享变量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> number=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">//自增</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Thread.sleep(<span class="number">100</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">this</span>.number++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取共享变量</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> VolatileDemo volDemo=<span class="keyword">new</span> VolatileDemo();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">500</span>;i++)&#123;</div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">volDemo.increase();</div><div class="line">&#125;</div><div class="line">&#125;).start();</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)&#123;</div><div class="line">Thread.yield();</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"number="</span>+volDemo.getNumber());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行上面的程序，输出的结果是不确定的。我们得出了一个结论</p><ul><li>volatile能够保证变量的可见性</li><li>volatile不能保证符合操作的原子性</li></ul><p>要保证符合操作的原子性，我们可以这么操作</p><p>方式一：使用aynchronized保证变量在线程中的原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;                    </div><div class="line"><span class="keyword">try</span> &#123;                                  </div><div class="line">Thread.sleep(<span class="number">100</span>);                 </div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;     </div><div class="line"><span class="comment">// TODO Auto-generated catch block </span></div><div class="line">e.printStackTrace();               </div><div class="line">&#125;                                      </div><div class="line">                                       </div><div class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;                  </div><div class="line"><span class="keyword">this</span>.number++;                     </div><div class="line">&#125;                                      </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>方式二：用ReentrantLock实现变量在线程中的原子性</p><p>引入Lock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Lock lock=<span class="keyword">new</span> ReentrantLock();</div></pre></td></tr></table></figure><p>开始加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;                      </div><div class="line"><span class="keyword">try</span> &#123;                                    </div><div class="line">Thread.sleep(<span class="number">100</span>);                   </div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;       </div><div class="line"><span class="comment">// TODO Auto-generated catch block   </span></div><div class="line">e.printStackTrace();                 </div><div class="line">&#125;                                        </div><div class="line">                                         </div><div class="line">lock.lock();                             </div><div class="line"><span class="keyword">try</span>&#123;                                     </div><div class="line"><span class="keyword">this</span>.number++;                       </div><div class="line">&#125;<span class="keyword">finally</span>&#123;                                </div><div class="line">lock.unlock();                       </div><div class="line">&#125;                                        </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要介绍在多线程开发中，对于并发读取数据的一种处理方式。&lt;/p&gt;
    
    </summary>
    
      <category term="Java-Basic" scheme="http://kimisme.com/categories/Java-Basic/"/>
    
    
      <category term="Java" scheme="http://kimisme.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C#程序破解</title>
    <link href="http://kimisme.com/2017/06/10/dot-net-app-crack/"/>
    <id>http://kimisme.com/2017/06/10/dot-net-app-crack/</id>
    <published>2017-06-10T06:23:19.000Z</published>
    <updated>2017-06-10T07:04:52.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在整理磁盘的时候，看到了一个文件，想起来是之前玩破解时留下的。本来想网上找一款软件来写写，最后偷懒还是自己写个简单的应用程序自娱自乐好了。</p><a id="more"></a><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>首先是电脑安装了宇宙最强IDE(<strong>Visual Studio</strong>)，它在本次的作用仅仅只是为了编译一个.Net应用程序，来模拟我们在百度上下载到的一款有C#编写的应用程序(当然网上肯定不会有这种商业软件，他们大部分都是经过代码混淆，软件加壳)。然后我们需要准备一款.Net的反汇编工具(<strong>Graywolf</strong>)，用来查看源码(源码不一定看的到，IL语言肯定是可以的)</p><h2 id="我们的测试软件"><a href="#我们的测试软件" class="headerlink" title="我们的测试软件"></a>我们的测试软件</h2><p>我们用<code>宇宙最强IDE</code>创建一个Winform程序，然后拖一个按钮，编写以下事件</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">WinApp</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            InitializeComponent();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnAlert_Click</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</div><div class="line">            &#123;</div><div class="line">                MessageBox.Show(i+<span class="string">"你好啊"</span>);</div><div class="line">            &#125;               </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="运行我们的测试程序"><a href="#运行我们的测试程序" class="headerlink" title="运行我们的测试程序"></a>运行我们的测试程序</h2><p>它的功能很简单，就是点击按钮，会弹出小窗口<code>1你好啊</code>，<code>2你好啊</code>,<code>3你好啊</code></p><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610015.png" alt="20170610015"></p><h2 id="我们的目的"><a href="#我们的目的" class="headerlink" title="我们的目的"></a>我们的目的</h2><p>我们要让这个应用程序中的按钮被点击的时候，弹出5次<code>Hello World</code></p><h2 id="开始反编译"><a href="#开始反编译" class="headerlink" title="开始反编译"></a>开始反编译</h2><p>打开我们的反编译工具(<strong>GrayWolf</strong>)，并导入我们的应用程序(<strong>WinApp.exe</strong>)</p><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610016.png" alt="20170610016"></p><p>左边框框里的是.Net平台的中间语言IL，这是.Net实现跨语言，跨平台的关键</p><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610017.png" alt="20170610017"></p><p>我们要找的就是按钮，一个可以弹出信息的按钮，我们一眼就看到了</p><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610018.png" alt="20170610018"></p><p>好的，接下来我们就开始修改代码，修改之后记得保存</p><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610019.png" alt="20170610019"></p><p>再次运行我们保存的文件</p><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610020.png" alt="20170610020"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>破解.Net程序和破解Java程序是类似的。在.Net中存在一种叫<strong>IL语言</strong>的语言，在Java中也同样存在一种叫<strong>字节码</strong> 的东西。它们都不过是保存在文本里面的十六进制罢了，既然<strong>CLR</strong>和<strong>JVM</strong>可以读懂这些，我们就又办法修改它们。比如你的同学开发了一款管理系统桌面程序，但是要登录。那么你就可以用小技巧，让它登录失去意义。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天在整理磁盘的时候，看到了一个文件，想起来是之前玩破解时留下的。本来想网上找一款软件来写写，最后偷懒还是自己写个简单的应用程序自娱自乐好了。&lt;/p&gt;
    
    </summary>
    
      <category term="DotNet" scheme="http://kimisme.com/categories/DotNet/"/>
    
    
      <category term="C#" scheme="http://kimisme.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>IDEA备忘录</title>
    <link href="http://kimisme.com/2017/06/10/cheat-sheet-intellij-ieda/"/>
    <id>http://kimisme.com/2017/06/10/cheat-sheet-intellij-ieda/</id>
    <published>2017-06-10T02:26:20.000Z</published>
    <updated>2017-06-10T09:29:35.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近准备入手IDEA玩玩，因为之前有过一段时间热衷于使用PyCharm开发Python，后来有段时间没写Python现在又忘记差不多了。这次准备边学习，边记录。</p><a id="more"></a><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="Sublime-Monokai主题"><a href="#Sublime-Monokai主题" class="headerlink" title="Sublime-Monokai主题"></a>Sublime-Monokai主题</h3><p><strong>下载主题包</strong></p><p><a href="https://github.com/y3sh/Intellij-Colors-Sublime-Monokai" target="_blank" rel="external">https://github.com/y3sh/Intellij-Colors-Sublime-Monokai</a></p><p><strong>导入主题包</strong></p><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610011.png" alt="20170610011"></p><p><strong>配置主题包</strong></p><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610012.png" alt="20170610012"></p><h3 id="护眼主题"><a href="#护眼主题" class="headerlink" title="护眼主题"></a>护眼主题</h3><p><strong>设置字体大小</strong></p><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610013.png" alt="20170610013"></p><p><strong>设置背景色</strong> </p><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610014.png" alt="20170610014"></p><h3 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a>其他主题</h3><p><a href="http://www.easycolor.cc/index.php/Index/exlist/tid/1" target="_blank" rel="external">http://www.easycolor.cc/index.php/Index/exlist/tid/1</a></p><h2 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h2><h3 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h3><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610001.png" alt="20170610001"></p><h3 id="取消拼音检查"><a href="#取消拼音检查" class="headerlink" title="取消拼音检查"></a>取消拼音检查</h3><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610002.png" alt="20170610002"></p><h3 id="关闭自动保存"><a href="#关闭自动保存" class="headerlink" title="关闭自动保存"></a>关闭自动保存</h3><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610003.png" alt="20170610003"></p><h3 id="未保存显示星号"><a href="#未保存显示星号" class="headerlink" title="未保存显示星号"></a>未保存显示星号</h3><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610004.png" alt="20170610004"></p><h3 id="开启序列号检测"><a href="#开启序列号检测" class="headerlink" title="开启序列号检测"></a>开启序列号检测</h3><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610005.png" alt="20170610005"></p><h3 id="修改资源文件的编码"><a href="#修改资源文件的编码" class="headerlink" title="修改资源文件的编码"></a>修改资源文件的编码</h3><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610006.png" alt="20170610006"></p><h3 id="修改快捷键"><a href="#修改快捷键" class="headerlink" title="修改快捷键"></a>修改快捷键</h3><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610007.png" alt="20170610007"></p><h3 id="隐藏没用的文件"><a href="#隐藏没用的文件" class="headerlink" title="隐藏没用的文件"></a>隐藏没用的文件</h3><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610009.png" alt="20170610009"></p><h3 id="代码提示不区分大小写"><a href="#代码提示不区分大小写" class="headerlink" title="代码提示不区分大小写"></a>代码提示不区分大小写</h3><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610008.png" alt="20170610008"></p><h3 id="自动import类型"><a href="#自动import类型" class="headerlink" title="自动import类型"></a>自动import类型</h3><p><img src="http://om9xacvdp.bkt.clouddn.com/20170610010.png" alt="20170610010"></p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p><strong>参考文章</strong></p><p><a href="http://blog.csdn.net/dc_726/article/details/42784275" target="_blank" rel="external">http://blog.csdn.net/dc_726/article/details/42784275</a></p><p><strong>创建main()方法</strong></p><p>方式一：输入<code>main</code>，然后按快捷键<code>Ctrl+J</code><br>方式二：输入<code>psvm</code></p><p><strong>快速System.out.println()</strong></p><p>输入<code>sout</code></p><p><strong>快速for(int i;i&lt;2;i++)循环</strong></p><p>输入<code>fori</code></p><p><strong>快速重构</strong></p><p>选中需要重构的代码块，然后按快捷键<code>Ctrl+Shift+Alt+T</code></p><p><strong>快速重命名</strong></p><p>选中需要重命名的变量或方法名，然后按快捷键<code>Shift+F6</code></p><p><strong>代码格式化</strong></p><p>方法一：按快捷键<code>Ctrl+Shift+Alt+L</code><br>方法二：按快捷键<code>Ctrl+Shift+A</code>，然后输入<code>reformat code</code></p><p><strong>删除某一行</strong></p><p>按快捷键<code>Ctrl+Y</code></p><p><strong>代码注释</strong></p><p>方式一：快捷键<code>Ctrl+/</code><br>方式二：快捷键<code>Ctrl+Shift+/</code></p><p><strong>快速解决</strong></p><p>快捷键<code>Alt+Enter</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近准备入手IDEA玩玩，因为之前有过一段时间热衷于使用PyCharm开发Python，后来有段时间没写Python现在又忘记差不多了。这次准备边学习，边记录。&lt;/p&gt;
    
    </summary>
    
      <category term="Cheat-Sheet" scheme="http://kimisme.com/categories/Cheat-Sheet/"/>
    
    
      <category term="Java" scheme="http://kimisme.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>metronic-overview</title>
    <link href="http://kimisme.com/2017/06/07/metronic-overview/"/>
    <id>http://kimisme.com/2017/06/07/metronic-overview/</id>
    <published>2017-06-07T14:50:47.000Z</published>
    <updated>2017-06-07T14:52:01.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://segmentfault.com/a/1190000006673582" target="_blank" rel="external">https://segmentfault.com/a/1190000006673582</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000006673582&quot; target=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux-shell-function</title>
    <link href="http://kimisme.com/2017/06/07/linux-shell-function/"/>
    <id>http://kimisme.com/2017/06/07/linux-shell-function/</id>
    <published>2017-06-07T14:24:18.000Z</published>
    <updated>2017-06-07T14:24:18.892Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux-shell-if-else</title>
    <link href="http://kimisme.com/2017/06/07/linux-shell-if-else/"/>
    <id>http://kimisme.com/2017/06/07/linux-shell-if-else/</id>
    <published>2017-06-07T13:35:57.000Z</published>
    <updated>2017-06-07T14:34:09.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><p><strong>使用expr</strong></p><ul><li>注意expr运算符之间要有空格</li><li>要想取运算的结果需要用反引号</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]<span class="comment"># expr 1 + 2</span></div><div class="line">3</div><div class="line">[root@localhost scripts]<span class="comment"># echo `expr 2 + 3`</span></div><div class="line">5</div><div class="line">[root@localhost scripts]<span class="comment"># s=`expr 2 + 3`</span></div><div class="line">[root@localhost scripts]<span class="comment"># echo $s</span></div></pre></td></tr></table></figure><p><strong>使用(())</strong></p><ul><li>每一个运算都要用括号包起来</li><li>要想取运算结果，需要用$引用</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]<span class="comment"># echo $((2+3))</span></div><div class="line">5</div><div class="line">[root@localhost scripts]<span class="comment"># echo $(((2+3)*4))</span></div><div class="line">20</div><div class="line">[root@localhost scripts]<span class="comment"># count=1</span></div><div class="line">[root@localhost scripts]<span class="comment"># ((count++))</span></div><div class="line">[root@localhost scripts]<span class="comment"># echo $count</span></div><div class="line">2</div></pre></td></tr></table></figure><p><strong>使用$[]</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]<span class="comment"># echo $[1+2]</span></div><div class="line">3</div><div class="line">[root@localhost scripts]<span class="comment"># a=$[1+2]</span></div><div class="line">[root@localhost scripts]<span class="comment"># echo $a</span></div><div class="line">3</div></pre></td></tr></table></figure><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p><strong>语法格式</strong></p><ul><li>每条语句前面的空格是可以去掉的，当然为了阅读良好还是保留</li><li>[ condition ]，在中括号也是一个命令，所以在与变量之间要有空格</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]<span class="comment"># vi welcome.sh </span></div><div class="line">                <span class="keyword">then</span></div><div class="line">                <span class="keyword">then</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">read</span> -p <span class="string">"please input your name:"</span> NAME</div><div class="line"><span class="keyword">if</span> [ <span class="variable">$NAME</span> = root ]</div><div class="line">        <span class="keyword">then</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"hello <span class="variable">$&#123;NAME&#125;</span>,welcom !"</span></div><div class="line">        <span class="keyword">elif</span> [ <span class="variable">$NAME</span> = jack ]</div><div class="line">                <span class="keyword">then</span></div><div class="line">                        <span class="built_in">echo</span> <span class="string">"hello <span class="variable">$&#123;NAME&#125;</span>,my goodfriend !"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">echo</span> <span class="string">"who are you"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><p><strong>true与false</strong></p><ul><li>[ 1=2 ]，只要condition是非空的字符串，都返回true</li><li>[ 1 = 2 ]，只有运算符两端有空格，它才表示运算，此时返回false</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]<span class="comment"># if [ a=b ];then echo ok;else echo nook;fi</span></div><div class="line">ok</div><div class="line">[root@localhost scripts]<span class="comment"># if [ a = b ];then echo ok;else echo nook;fi</span></div><div class="line">nook</div><div class="line">[root@localhost scripts]<span class="comment"># if [   ];then echo ok;else echo nook;fi</span></div><div class="line">nook</div></pre></td></tr></table></figure><p><strong>短路(三元运算符)</strong></p><p>语法格式：<code>[condition] &amp;&amp; echo ok || echo nook</code>。条件满足执行&amp;&amp;后面的语句；条件不满足，执行||后面的语句</p><p><strong>条件的组合</strong></p><ul><li>[]不支持&amp;&amp;，||符号，可以借助于-a，-o</li><li>[[]]支持&amp;&amp;，||符号</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]<span class="comment"># if [ a = b -a b = b ];then echo ok;else echo nook;fi</span></div><div class="line">nook</div><div class="line">[root@localhost scripts]<span class="comment"># if [ a = b -o b = b ];then echo ok;else echo nook;fi</span></div><div class="line">ok</div><div class="line">[root@localhost scripts]<span class="comment"># if [[ a = b &amp;&amp; b = b ]];then echo ok;else echo nook;fi</span></div><div class="line">nook</div><div class="line">[root@localhost scripts]<span class="comment"># if [[ a = b || b = b ]];then echo ok;else echo nook;fi</span></div><div class="line">ok</div></pre></td></tr></table></figure><p><strong>字符串比较</strong></p><ul><li>= 字符串是否相等</li><li>!= 字符串是否不等</li><li>-n 字符串长度是否为0</li><li>-z 字符串长度是否为0</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]<span class="comment"># if [ 'aa' = 'bb' ];then echo ok;else echo notok;fi</span></div><div class="line">notok</div><div class="line">[root@localhost scripts]<span class="comment"># if [ 'aa' != 'bb' ];then echo ok;else echo notok;fi</span></div><div class="line">ok</div><div class="line">[root@localhost scripts]<span class="comment"># if [ -n 'aa' ];then echo ok;else echo notok;fi</span></div><div class="line">ok</div><div class="line">[root@localhost scripts]<span class="comment"># if [ -z 'aa' ];then echo ok;else echo notok;fi</span></div><div class="line">notok</div></pre></td></tr></table></figure><p><strong>整数比较</strong></p><ul><li>-lt表示小于</li><li>-le表示小于或等于</li><li>-eq表示等于</li><li>-gt表示大于</li><li>-ge表示大于或等于</li><li>-ne表示不等于</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]<span class="comment"># if [ 1 -le 5 ];then echo ok;else echo notok;fi</span></div><div class="line">ok</div></pre></td></tr></table></figure><p><strong>文件判断</strong></p><ul><li>-d表示是否为目录</li><li>-f表示是否为文件</li><li>-e表示是否存在</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]<span class="comment"># if [ -d /bin ];then echo ok;else echo notok;fi</span></div><div class="line">ok</div><div class="line">[root@localhost scripts]<span class="comment"># if [ -d /bin2 ];then echo ok;else echo notok;fi</span></div><div class="line">notok</div><div class="line">[root@localhost scripts]<span class="comment"># if [ -f /bin/ls ];then echo ok;else echo notok;fi</span></div><div class="line">ok</div><div class="line">[root@localhost scripts]<span class="comment"># if [ -f /bin/l2s ];then echo ok;else echo notok;fi</span></div><div class="line">notok</div><div class="line">[root@localhost scripts]<span class="comment"># if [ -e /bin/ls ];then echo ok;else echo notok;fi</span></div><div class="line">ok</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算术运算&quot;&gt;&lt;a href=&quot;#算术运算&quot; class=&quot;headerlink&quot; title=&quot;算术运算&quot;&gt;&lt;/a&gt;算术运算&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;使用expr&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意expr运算符之间要有空格&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>springboot-JPA连接数据库</title>
    <link href="http://kimisme.com/2017/06/07/springboot-db-jpa/"/>
    <id>http://kimisme.com/2017/06/07/springboot-db-jpa/</id>
    <published>2017-06-07T06:17:20.000Z</published>
    <updated>2017-06-07T12:54:24.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍在springboot中如何使用JPA操作数据库</p><a id="more"></a><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">--src/main/java</div><div class="line">----com.easy</div><div class="line">------Program.java</div><div class="line">----com.easy.controllers</div><div class="line">------HomeController.java</div><div class="line">------StudentController.java</div><div class="line">----com.easy.dao</div><div class="line">------StudentDao.java</div><div class="line">----com.easy.pojo</div><div class="line">------Student.java</div><div class="line">--src/main/resources</div><div class="line">----application.properties</div><div class="line">--build.gradle</div></pre></td></tr></table></figure><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">compile group: <span class="string">'org.springframework.boot'</span>, name: <span class="string">'spring-boot-starter-web'</span>, version: <span class="string">'1.4.2.RELEASE'</span></div><div class="line">compile group: <span class="string">'org.springframework.boot'</span>, name: <span class="string">'spring-boot-starter-test'</span>, version: <span class="string">'1.4.2.RELEASE'</span></div><div class="line">compile group: <span class="string">'mysql'</span>, name: <span class="string">'mysql-connector-java'</span>, version: <span class="string">'5.1.38'</span></div><div class="line">compile group: <span class="string">'org.springframework.boot'</span>, name: <span class="string">'spring-boot-starter-data-jpa'</span>, version: <span class="string">'1.4.2.RELEASE'</span></div></pre></td></tr></table></figure><h2 id="编写实体层"><a href="#编写实体层" class="headerlink" title="编写实体层"></a>编写实体层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"t_student3"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line"><span class="meta">@Id</span></div><div class="line"><span class="meta">@GeneratedValue</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"><span class="keyword">private</span> Date createTime;</div></pre></td></tr></table></figure><h2 id="编写数据层"><a href="#编写数据层" class="headerlink" title="编写数据层"></a>编写数据层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Student</span>,<span class="title">Integer</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="编写控制器层"><a href="#编写控制器层" class="headerlink" title="编写控制器层"></a>编写控制器层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/stu"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> StudentDao studentDao;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</div><div class="line"><span class="keyword">public</span> List&lt;Student&gt;getStudents()&#123;</div><div class="line"><span class="keyword">return</span> studentDao.findAll();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要介绍在springboot中如何使用JPA操作数据库&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://kimisme.com/categories/SpringBoot/"/>
    
    
      <category term="Spring" scheme="http://kimisme.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>springboot-JDBC连接数据库</title>
    <link href="http://kimisme.com/2017/06/07/springboot-db-jdbc/"/>
    <id>http://kimisme.com/2017/06/07/springboot-db-jdbc/</id>
    <published>2017-06-07T05:39:56.000Z</published>
    <updated>2017-06-07T12:54:24.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍在SpringBoot中如何用jdbc连接数据库</p><a id="more"></a><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">--src/main/java</div><div class="line">----com.easy</div><div class="line">------Program.java</div><div class="line">----com.easy.controllers</div><div class="line">------HomeController.java</div><div class="line">------StudentController.java</div><div class="line">----com.easy.pojo</div><div class="line">------Student.java</div><div class="line">----com.easy.service</div><div class="line">------StudentService.java</div><div class="line">--src/main/resources</div><div class="line">----application.properties</div><div class="line">--build.gradle</div></pre></td></tr></table></figure><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">compile group: <span class="string">'org.springframework.boot'</span>, name: <span class="string">'spring-boot-starter-web'</span>, version: <span class="string">'1.4.2.RELEASE'</span></div><div class="line">compile group: <span class="string">'org.springframework.boot'</span>, name: <span class="string">'spring-boot-starter-test'</span>, version: <span class="string">'1.4.2.RELEASE'</span></div><div class="line">compile group: <span class="string">'mysql'</span>, name: <span class="string">'mysql-connector-java'</span>, version: <span class="string">'5.1.38'</span></div><div class="line">compile group: <span class="string">'org.springframework.boot'</span>, name: <span class="string">'spring-boot-starter-jdbc'</span>, version: <span class="string">'1.4.2.RELEASE'</span></div></pre></td></tr></table></figure><h2 id="配置JDBC连接"><a href="#配置JDBC连接" class="headerlink" title="配置JDBC连接"></a>配置JDBC连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//127.0.0.1:3306/tempdb?useSSL=true</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=<span class="number">123456</span></div><div class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</div></pre></td></tr></table></figure><h2 id="编写我们的实体类"><a href="#编写我们的实体类" class="headerlink" title="编写我们的实体类"></a>编写我们的实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"><span class="keyword">private</span> Date createTime;</div></pre></td></tr></table></figure><h2 id="编写Service层"><a href="#编写Service层" class="headerlink" title="编写Service层"></a>编写Service层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getList</span><span class="params">()</span></span>&#123;</div><div class="line">String sql=<span class="string">"select ID,Name,Age,CreateTime from t_student"</span>;</div><div class="line"><span class="keyword">return</span> (List&lt;Student&gt;)jdbcTemplate.query(sql, <span class="keyword">new</span> RowMapper&lt;Student&gt;()&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">Student stu=<span class="keyword">new</span> Student();</div><div class="line">stu.setId(rs.getInt(<span class="string">"ID"</span>));</div><div class="line">stu.setName(rs.getString(<span class="string">"Name"</span>));</div><div class="line">stu.setAge(rs.getInt(<span class="string">"Age"</span>));</div><div class="line">stu.setCreateTime(rs.getDate(<span class="string">"CreateTime"</span>));</div><div class="line"><span class="keyword">return</span> stu;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="编写控制层"><a href="#编写控制层" class="headerlink" title="编写控制层"></a>编写控制层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/stu"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> StudentService studentService;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</div><div class="line"><span class="keyword">public</span> List&lt;Student&gt;getStudents()&#123;</div><div class="line"><span class="keyword">return</span> studentService.getList();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要介绍在SpringBoot中如何用jdbc连接数据库&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://kimisme.com/categories/SpringBoot/"/>
    
    
      <category term="Spring" scheme="http://kimisme.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Linux系列-变量定义</title>
    <link href="http://kimisme.com/2017/06/06/linux-shell-thread-relation/"/>
    <id>http://kimisme.com/2017/06/06/linux-shell-thread-relation/</id>
    <published>2017-06-06T15:00:04.000Z</published>
    <updated>2017-06-07T13:31:23.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍shell中的变量</p><a id="more"></a><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><p>可以用<code>set</code>命令查看系统变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# set | grep PWD</div><div class="line">PWD=/root</div></pre></td></tr></table></figure><h2 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h2><p><strong>变量的赋值</strong></p><p>变量=值（等号两侧不能有空格）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># arg=hello</span></div><div class="line">[root@localhost ~]<span class="comment"># arg2="hello world"</span></div><div class="line">[root@localhost ~]<span class="comment"># arg3='hello world'</span></div><div class="line">[root@localhost ~]<span class="comment"># arg4="$arg world"</span></div><div class="line">[root@localhost ~]<span class="comment"># arg5='$arg world'</span></div></pre></td></tr></table></figure><p><strong>变量的使用</strong></p><p>单引号会将变量的引用转义，比如$arg</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># echo $arg</span></div><div class="line">hello</div><div class="line">[root@localhost ~]<span class="comment"># echo $&#123;arg2&#125;s</span></div><div class="line">hello worlds</div><div class="line">[root@localhost ~]<span class="comment"># arg4="$arg world"</span></div><div class="line">[root@localhost ~]<span class="comment"># echo $arg4</span></div><div class="line">hello world</div><div class="line">[root@localhost ~]<span class="comment"># arg5='$arg world'</span></div><div class="line">[root@localhost ~]<span class="comment"># echo $arg5</span></div><div class="line"><span class="variable">$arg</span> world</div></pre></td></tr></table></figure><p><strong>撤销变量</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># unset arg</span></div></pre></td></tr></table></figure><p><strong>变量的提权</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> a=aaa</div></pre></td></tr></table></figure><h2 id="操作练习"><a href="#操作练习" class="headerlink" title="操作练习"></a>操作练习</h2><p>编写第一个shell<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]<span class="comment"># vi a.sh</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line">a=<span class="string">"a in a.sh"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$a</span></div></pre></td></tr></table></figure></p><p>编写第二个shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]# vi b.sh</div><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">b="b in b.sh"</div><div class="line">echo $b</div><div class="line">echo $a</div></pre></td></tr></table></figure><p>给shell添加执行的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]# chmod +x a.sh</div><div class="line">[root@localhost scripts]# chmod +x b.sh</div></pre></td></tr></table></figure><p>执行shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]# sh a.sh</div><div class="line">in a.sh---aaa</div><div class="line">in b.sh---</div></pre></td></tr></table></figure><p>因为每次调用sh都会开启一个新的进程。a.sh和b.sh是在不同的进程里，进程之间是不能共享变量的。</p><p>方式一：使用export</p><p>修改a.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]# vi a.sh</div><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">export a=aaa</div><div class="line">echo "in a.sh---"$a</div><div class="line">sh b.sh</div></pre></td></tr></table></figure><p>执行shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]# sh a.sh</div><div class="line">in a.sh---aaa</div><div class="line">in b.sh---aaa</div></pre></td></tr></table></figure><p>因为b.sh是在a.sh所在进程的一个子进程。如果给变量添加export，那么它的子进程空间就可以共享变量。<br>但是父进程还是不能共享<code>[root@localhost scripts]# echo $a</code></p><p>方式二：使用source</p><p>修改a.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]# vi a.sh</div><div class="line">#!/bin/bash</div><div class="line">a=aaa</div><div class="line">echo &quot;in a.sh---&quot;$a</div><div class="line">source /root/scripts/b.sh</div></pre></td></tr></table></figure><p>执行shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]# sh a.sh</div><div class="line">in a.sh---aaa</div><div class="line">in b.sh---aaa</div></pre></td></tr></table></figure><p>如果使用source的话，执行b.sh的时候就不会在开启一个新的进程。而是b.sh也在a.sh所在的进程空间中执行</p><p>source的另一种写法，就是使用点号</p><p>修改a.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost scripts]# vi a.sh</div><div class="line">#!/bin/bash</div><div class="line">a=aaa</div><div class="line">echo &quot;in a.sh---&quot;$a</div><div class="line">. /root/scripts/b.sh</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要介绍shell中的变量&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>springboot-启动加载数据</title>
    <link href="http://kimisme.com/2017/06/06/springboot-boot-load-data/"/>
    <id>http://kimisme.com/2017/06/06/springboot-boot-load-data/</id>
    <published>2017-06-06T05:41:15.000Z</published>
    <updated>2017-06-07T12:54:24.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们的项目在启动的时候需要加载一些数据或做一些事，这个时候就我们要怎么做。</p><a id="more"></a><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">--src/main/java</div><div class="line">----com.easy</div><div class="line">------Program.java</div><div class="line">----com.easy.controllers</div><div class="line">------HomeController.java</div><div class="line">----com.easy.core</div><div class="line">------MyStartupRunner1.java</div><div class="line">------MyStartupRunner2.java</div><div class="line">--build.gradle</div></pre></td></tr></table></figure><h2 id="编写我们的服务"><a href="#编写我们的服务" class="headerlink" title="编写我们的服务"></a>编写我们的服务</h2><p><strong>第一个服务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Order</span>(value=<span class="number">2</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStartupRunner1</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"MyStartupRunner1..."</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>第二个服务</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Order</span>(value=<span class="number">1</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStartupRunner2</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"MyStartupRunner2..."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>@Order注解的执行优先级是按value值从小到大顺序</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.csdn.net/catoop/article/details/50501710" target="_blank" rel="external">http://blog.csdn.net/catoop/article/details/50501710</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当我们的项目在启动的时候需要加载一些数据或做一些事，这个时候就我们要怎么做。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://kimisme.com/categories/SpringBoot/"/>
    
    
      <category term="Spring" scheme="http://kimisme.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot系列-拦截器</title>
    <link href="http://kimisme.com/2017/06/06/springboot-interceptor/"/>
    <id>http://kimisme.com/2017/06/06/springboot-interceptor/</id>
    <published>2017-06-06T03:29:45.000Z</published>
    <updated>2017-06-07T12:54:24.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍下拦截器在SpringBoot中的使用</p><a id="more"></a><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>创建自定义的拦截器(实现<code>HandlerInterceptor</code>接口)</li><li>创建Web容器(继承<code>WebMvcConfigurerAdapter</code>类)，并将我们的拦截器<code>addInterceptors</code>到容器</li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">--src/main/java</div><div class="line">----com.easy</div><div class="line">------Program.java</div><div class="line">----com.easy.controllers</div><div class="line">------HomeController.java</div><div class="line">----com.easy.interceptor</div><div class="line">------MyInterceptor.java</div><div class="line">------MyWebAppConfigurer.java</div><div class="line">----com.easy.web.servlet</div><div class="line">------BServlet.java</div><div class="line">--build.gradle</div></pre></td></tr></table></figure><h2 id="定义我们的拦截器"><a href="#定义我们的拦截器" class="headerlink" title="定义我们的拦截器"></a>定义我们的拦截器</h2><p>执行过程：<code>请求到达</code>—&gt;<code>preHandle</code>—&gt;<code>Controller中的方法</code>—&gt;<code>postHandle</code>—&gt;<code>afterCompletion</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"preHandle"</span>);</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//只有返回true才会往下执行</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></div><div class="line"><span class="function"><span class="params">ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"postHandle"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">System.out.println(<span class="string">"afterCompletion"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="创建Web容器"><a href="#创建Web容器" class="headerlink" title="创建Web容器"></a>创建Web容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppConfigurer</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//多个拦截器组成一个拦截器链</span></div><div class="line"><span class="comment">//addPathPatterns()用于添加拦截规则</span></div><div class="line"><span class="comment">//excludePathPatterns()用于排除拦截</span></div><div class="line">registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/*"</span>);</div><div class="line"></div><div class="line"><span class="keyword">super</span>.addInterceptors(registry);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在浏览器中输入<code>http://localhost:8080/BServlet</code>不触发拦截，为什么呢？</p><blockquote><p>只有经过DispatcherServlet 的请求，才会走拦截器链，我们自定义的Servlet 请求是不会被拦截的</p></blockquote><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://blog.csdn.net/catoop/article/details/50501696" target="_blank" rel="external">http://blog.csdn.net/catoop/article/details/50501696</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要介绍下拦截器在SpringBoot中的使用&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://kimisme.com/categories/SpringBoot/"/>
    
    
      <category term="Spring" scheme="http://kimisme.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot系列-Servlet</title>
    <link href="http://kimisme.com/2017/06/06/springboot-servlet-filter-listener/"/>
    <id>http://kimisme.com/2017/06/06/springboot-servlet-filter-listener/</id>
    <published>2017-06-06T02:44:49.000Z</published>
    <updated>2017-06-07T12:54:24.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaWeb的三大组件：Servlet,Filter,Listener。本文主要介绍在SpringBoot如何使用</p><h2 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h2><p>在spring boot中添加自己的Servlet有两种方法，代码注册Servlet和注解自动注册。</p><p>一、代码注册通过ServletRegistrationBean、 FilterRegistrationBean 和 ServletListenerRegistrationBean 获得控制。<br>也可以通过实现 ServletContextInitializer 接口直接注册。</p><p>二、在 SpringBootApplication 上使用@ServletComponentScan 注解后，Servlet、Filter、Listener 可以直接通过 @WebServlet、@WebFilter、@WebListener 注解自动注册，无需其他代码。</p><h2 id="使用代码注册"><a href="#使用代码注册" class="headerlink" title="使用代码注册"></a>使用代码注册</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">--src/main/java</div><div class="line">----com.easy</div><div class="line">------Program.java</div><div class="line">----com.easy.controllers</div><div class="line">------HomeController.java</div><div class="line">----com.easy.web.filter</div><div class="line">------AFilter.java</div><div class="line">----com.easy.web.listener</div><div class="line">------AListener.java</div><div class="line">----com.easy.web.servlet</div><div class="line">------AServlet.java</div><div class="line">--build.gradle</div></pre></td></tr></table></figure><h3 id="自定义我们组件"><a href="#自定义我们组件" class="headerlink" title="自定义我们组件"></a>自定义我们组件</h3><p><strong>自定义我们的Servet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">resp.getWriter().append(<span class="string">"Get Request:"</span>+req.getRequestURL());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>自定义我们的Filter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">System.out.println(<span class="string">"初始化过滤器"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">System.out.println(<span class="string">"执行过滤操作"</span>);</div><div class="line">chain.doFilter(request, response);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"销户过滤器"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>自定义我们的Listener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"初始化监听器"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"销户监听器"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="对组件进行注册"><a href="#对组件进行注册" class="headerlink" title="对组件进行注册"></a>对组件进行注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(Program.class, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">ServletRegistrationBean registration=<span class="keyword">new</span> ServletRegistrationBean();</div><div class="line">registration.setServlet(<span class="keyword">new</span> AServlet());</div><div class="line">registration.addUrlMappings(<span class="string">"/AServlet/*"</span>);</div><div class="line"><span class="keyword">return</span> registration;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">FilterRegistrationBean registration=<span class="keyword">new</span> FilterRegistrationBean();</div><div class="line">registration.setFilter(<span class="keyword">new</span> AFilter());</div><div class="line">registration.addUrlPatterns(<span class="string">"/*"</span>);</div><div class="line"><span class="keyword">return</span> registration;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">servletListenerRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">ServletListenerRegistrationBean registration=<span class="keyword">new</span> ServletListenerRegistrationBean();</div><div class="line">registration.setListener(<span class="keyword">new</span> AListener());</div><div class="line"><span class="keyword">return</span> registration;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当我们在浏览器中输入<code>http://localhost:8080/AServlet/Jack</code>，会输出<code>Get Request:http://localhost:8080/AServlet/Jack</code></p><h2 id="使用注解自动注册"><a href="#使用注解自动注册" class="headerlink" title="使用注解自动注册"></a>使用注解自动注册</h2><h3 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">--src/main/java</div><div class="line">----com.easy</div><div class="line">------Program.java</div><div class="line">----com.easy.controllers</div><div class="line">------HomeController.java</div><div class="line">----com.easy.web.filter</div><div class="line">------BFilter.java</div><div class="line">----com.easy.web.listener</div><div class="line">------BListener.java</div><div class="line">----com.easy.web.servlet</div><div class="line">------BServlet.java</div><div class="line">--build.gradle</div></pre></td></tr></table></figure><h3 id="自定义我们的组件"><a href="#自定义我们的组件" class="headerlink" title="自定义我们的组件"></a>自定义我们的组件</h3><p><strong>自定义我们的Servlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"BServlet"</span>,urlPatterns=<span class="string">"/BServlet/*"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">resp.getWriter().append(<span class="string">"Get Request:"</span>+req.getRequestURL());</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>自定义我们的Filter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(urlPatterns=<span class="string">"/*"</span>,filterName=<span class="string">"BFilter"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">System.out.println(<span class="string">"初始化过滤器"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></div><div class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">System.out.println(<span class="string">"执行过滤操作"</span>);</div><div class="line">chain.doFilter(request, response);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"销户过滤器"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>自定义我们的Listener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebListener</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"初始化监听器"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"销户监听器"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="注册我们的组件"><a href="#注册我们的组件" class="headerlink" title="注册我们的组件"></a>注册我们的组件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@ServletComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(Program.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaWeb的三大组件：Servlet,Filter,Listener。本文主要介绍在SpringBoot如何使用&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="SpringBoot" scheme="http://kimisme.com/categories/SpringBoot/"/>
    
    
      <category term="Spring" scheme="http://kimisme.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java基础-动态代理</title>
    <link href="http://kimisme.com/2017/06/06/java-basic-aop/"/>
    <id>http://kimisme.com/2017/06/06/java-basic-aop/</id>
    <published>2017-06-06T00:28:04.000Z</published>
    <updated>2017-06-07T12:54:24.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要介绍Java中的两种动态代理方式</p><a id="more"></a><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><h3 id="编写代理类"><a href="#编写代理类" class="headerlink" title="编写代理类"></a>编写代理类</h3><p>编写我们需要代理的类，JDK动态代理，代理类必须依赖接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String fromAccount, String toAccount, <span class="keyword">int</span> ammount)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String accountId)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代理类具体的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span></span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String fromAccount, String toAccount, <span class="keyword">int</span> ammount)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"Transfer "</span> + ammount + <span class="string">" from "</span> + fromAccount + <span class="string">" to  "</span> + toAccount );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String accountId)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"Query account id:"</span> +accountId);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="编写切面类"><a href="#编写切面类" class="headerlink" title="编写切面类"></a>编写切面类</h3><p>切面类可以理解为我们想要给代理类增强的功能，比如给业务层增加事务功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTx</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"Begin transaction"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commitTx</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"Commit transaction"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>我们需要三个类型：类加载器，代理类实现的接口，handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> AccountService accountService = <span class="keyword">new</span> AccountServiceImpl();</div><div class="line"><span class="keyword">final</span> Transaction tran = <span class="keyword">new</span> Transaction();</div><div class="line"></div><div class="line">ClassLoader loader = TestApp.class.getClassLoader();</div><div class="line">InvocationHandler handler = <span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">Object obj = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (method.getName().equals(<span class="string">"transfer"</span>)) &#123;</div><div class="line">tran.beginTx();</div><div class="line">obj = method.invoke(accountService, args);</div><div class="line">tran.commitTx();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">obj = method.invoke(accountService, args);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">AccountService proxyService = (AccountService) Proxy.newProxyInstance(loader,</div><div class="line"><span class="keyword">new</span> Class[] &#123; AccountService.class &#125;, handler);</div><div class="line">proxyService.transfer(<span class="string">"Jack"</span>, <span class="string">"Rose"</span>, <span class="number">520</span>);</div><div class="line">proxyService.query(<span class="string">"Rose"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="cglib代理"><a href="#cglib代理" class="headerlink" title="cglib代理"></a>cglib代理</h2><h3 id="引入Jar包"><a href="#引入Jar包" class="headerlink" title="引入Jar包"></a>引入Jar包</h3><p>使用cglib代理，我们需要引入第三方jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile group: <span class="string">'cglib'</span>, name: <span class="string">'cglib'</span>, version: <span class="string">'2.2.2'</span></div></pre></td></tr></table></figure><h3 id="设置目标类"><a href="#设置目标类" class="headerlink" title="设置目标类"></a>设置目标类</h3><p>我们的目标类不需要实现任何接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span></span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String fromAccount, String toAccount, <span class="keyword">int</span> ammount)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"Transfer "</span> + ammount + <span class="string">" from "</span> + fromAccount + <span class="string">" to  "</span> + toAccount );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String accountId)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"Query account id:"</span> +accountId);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="设置切面类"><a href="#设置切面类" class="headerlink" title="设置切面类"></a>设置切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beginTx</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"Begin transaction"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commitTx</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"Commit transaction"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取代理类"><a href="#获取代理类" class="headerlink" title="获取代理类"></a>获取代理类</h3><p>使用cglib代理，有个核心类就是Enhancer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//1.目标类</span></div><div class="line"><span class="keyword">final</span> AccountServiceImpl accountService=<span class="keyword">new</span> AccountServiceImpl();</div><div class="line"><span class="comment">//2.切面类</span></div><div class="line"><span class="keyword">final</span> Transaction tran=<span class="keyword">new</span> Transaction();</div><div class="line"><span class="comment">//3.代理类</span></div><div class="line"><span class="comment">//3.1核心类</span></div><div class="line">Enhancer enhancer=<span class="keyword">new</span> Enhancer();</div><div class="line"><span class="comment">//3.2确定父类</span></div><div class="line">enhancer.setSuperclass(accountService.getClass());</div><div class="line"><span class="comment">//3.3设置回调函数</span></div><div class="line">enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">Object obj=<span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span>(method.getName().equals(<span class="string">"transfer"</span>))&#123;</div><div class="line">tran.beginTx();</div><div class="line">obj=method.invoke(accountService, args);</div><div class="line">tran.commitTx();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">obj=method.invoke(accountService, args);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//3.4创建代理类</span></div><div class="line">AccountServiceImpl proxyService=(AccountServiceImpl)enhancer.create();</div><div class="line">proxyService.transfer(<span class="string">"Rose"</span>, <span class="string">"Jack"</span>, <span class="number">520</span>);</div><div class="line">proxyService.query(<span class="string">"Rose"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文主要介绍Java中的两种动态代理方式&lt;/p&gt;
    
    </summary>
    
      <category term="Java-Basic" scheme="http://kimisme.com/categories/Java-Basic/"/>
    
    
      <category term="Java" scheme="http://kimisme.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>jvm-awesome</title>
    <link href="http://kimisme.com/2017/06/05/jvm-awesome/"/>
    <id>http://kimisme.com/2017/06/05/jvm-awesome/</id>
    <published>2017-06-05T12:37:46.000Z</published>
    <updated>2017-06-05T12:37:46.529Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
